CREATE TABLE IF NOT EXISTS Serien (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    link VARCHAR(255),
    other_links  VARCHAR(255), 
    watcher BOOLEAN DEFAULT '0' NOT NULL, 
    status varchar(25) CHECK (status IN ('idc','new','process','done','ERROR', '')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_changed TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) 

CREATE TABLE IF NOT EXISTS Logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    modul VARCHAR(255) NOT NULL,
    text VARCHAR(255) NOT NULL,
    lvl  VARCHAR(255) NOT NULL, 
    info VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    ) 
CREATE TABLE IF NOT EXISTS hoster (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
    priority INT(9), 
    regex1 VARCHAR(255),
    regex2 VARCHAR(255),
    regex3 VARCHAR(255),
    status varchar(25) NOT NULL CHECK (status IN ('working','test','new','ERROR')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_changed TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) 

CREATE TABLE IF NOT EXISTS Staffel (
    id INT AUTO_INCREMENT PRIMARY KEY,
    serien_id INT,
    nr VARCHAR(255),
    name VARCHAR(255),
    link  VARCHAR(510), 
    watcher BOOLEAN DEFAULT '0' NOT NULL, 
    status varchar(25) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_changed TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) 
-- status varchar(25) NOT NULL CHECK (status IN ('idc','new','process','ERROR')), change id to int
CREATE TABLE IF NOT EXISTS Episode (
    id INT AUTO_INCREMENT PRIMARY KEY,
    season_id VARCHAR(255) NOT NULL,
    nr VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    pid VARCHAR(255) UNIQUE,
    check_quali BOOLEAN DEFAULT '0' NOT NULL, 
    bs_link  VARCHAR(255), 
    avl_hoster VARCHAR(255), 
    link VARCHAR(750),
    link_quali  VARCHAR(255),
    temp_link  VARCHAR(255),
    temp_link_quali  VARCHAR(255), 
    watcher BOOLEAN DEFAULT '0' NOT NULL, 
    status varchar(25) NOT NULL,
    error_msg varchar(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_changed TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) 

CREATE TABLE IF NOT EXISTS Movie (
    id INT AUTO_INCREMENT PRIMARY KEY,
    season_id INT NOT NULL,
    nr VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    stack_able BOOLEAN DEFAULT '0' NOT NULL, 
    check_quali BOOLEAN DEFAULT '0' NOT NULL, 
    link  VARCHAR(255), 
    link_quali  VARCHAR(255),
    temp_link VARCHAR(255),  
    temp_link_quali  VARCHAR(255), 

    watcher BOOLEAN DEFAULT '0' NOT NULL, 
    status varchar(25) NOT NULL CHECK (status IN ('idc','new','process','ERROR')),
    error_msg varchar(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_changed TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) 
CREATE OR REPLACE VIEW Files AS SELECT
    Serien.id AS serien_id,
    Staffel.id AS staffel_id,
    Episode.id AS episode_id,
    Staffel.name AS serien_name,
    Staffel.nr AS staffel_nr,
    Episode.name AS episode_name,
    Episode.nr AS episode_nr,
    CONCAT(   REPLACE(Serien.name, ' ', '.'), "-S", Staffel.nr ,"-E", Episode.nr,"-", REPLACE(Episode.name, ' ', '.'),".mp4") AS filename, 
    Episode.pid,
    Episode.link,
    Episode.link_quali,
    Episode.status
FROM
    Episode
INNER JOIN Staffel ON Episode.season_id = Staffel.id
INNER JOIN Serien ON Staffel.serien_id = Serien.id
WHERE Episode.link IS NOT NULL AND Episode.link <> '' AND
 Episode.status != "new" AND Episode.status != "idc" AND Episode.status != "waiting";
#V2
select `Ombi`.`EpisodeRequests`.`Id` AS `EpiReqId`,0 AS `isMovie`,`Ombi`.`EpisodeRequests`.`SeasonId` AS `SeasonId`,`Ombi`.`SeasonRequests`.`ChildRequestId` AS `RequestId`,`Ombi`.`TvRequests`.`Title` AS `Serie`,`Ombi`.`SeasonRequests`.`SeasonNumber` AS `SeasonNr`,`Ombi`.`EpisodeRequests`.`EpisodeNumber` AS `EpisodeNumber`,`Ombi`.`TvRequests`.`TvDbId` AS `TvDbId`,`Ombi`.`TvRequests`.`ImdbId` AS `ImdbId`,`Ombi`.`TvRequests`.`Status` AS `Status`,`Ombi`.`EpisodeRequests`.`Title` AS `EpiTitle`,`Ombi`.`ChildRequests`.`Title` AS `Title`,`Ombi`.`ChildRequests`.`Available` AS `Available`,`Ombi`.`ChildRequests`.`MarkedAsAvailable` AS `MarkedAsAvailable`,`Ombi`.`ChildRequests`.`Denied` AS `Denied`,`Ombi`.`ChildRequests`.`DeniedReason` AS `DeniedReason` from (((`Ombi`.`EpisodeRequests` join `Ombi`.`SeasonRequests` on(`Ombi`.`EpisodeRequests`.`SeasonId` = `Ombi`.`SeasonRequests`.`Id`)) join `Ombi`.`ChildRequests` on(`Ombi`.`SeasonRequests`.`ChildRequestId` = `Ombi`.`ChildRequests`.`Id`)) join `Ombi`.`TvRequests` on(`Ombi`.`ChildRequests`.`ParentRequestId` = `Ombi`.`TvRequests`.`Id`)) union select `Ombi`.`MovieRequests`.`Id` AS `ID`,1 AS `TRUE`,NULL AS `NULL`,NULL AS `NULL`,`Ombi`.`MovieRequests`.`Title` AS `Title`,NULL AS `NULL`,NULL AS `NULL`,`Ombi`.`MovieRequests`.`TheMovieDbId` AS `TheMovieDbId`,`Ombi`.`MovieRequests`.`ImdbId` AS `ImdbId`,`Ombi`.`MovieRequests`.`Status` AS `Status`,NULL AS `NULL`,`Ombi`.`MovieRequests`.`Title` AS `Title`,`Ombi`.`MovieRequests`.`Available` AS `Available`,`Ombi`.`MovieRequests`.`MarkedAsAvailable` AS `MarkedAsAvailable`,`Ombi`.`MovieRequests`.`Denied` AS `Denied`,`Ombi`.`MovieRequests`.`DeniedReason` AS `DeniedReason` from `Ombi`.`MovieRequests`



ALTER TABLE `EpisodeRequests` CHANGE `Title` `Title` LONGTEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL; 
ALTER TABLE `MovieRequests` CHANGE `Title` `Title` LONGTEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL; 
#test it only with this option + a movie with äüö Or only cast in view 
ALTER TABLE `TvRequests` CHANGE `Title` `Title` LONGTEXT CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL DEFAULT NULL; 
#V3
 CREATE OR REPLACE VIEW WorkToDo AS SELECT
    `Ombi`.`EpisodeRequests`.`Id` AS `EpiReqId`,
    FALSE AS `isMovie`,
    `Ombi`.`EpisodeRequests`.`SeasonId` AS `SeasonId`,
    `Ombi`.`SeasonRequests`.`ChildRequestId` AS `RequestId`,
    `Ombi`.`TvRequests`.`Title` AS `Serie`,
    `Ombi`.`SeasonRequests`.`SeasonNumber` AS `SeasonNr`,
    `Ombi`.`EpisodeRequests`.`EpisodeNumber` AS `EpisodeNumber`,
    `Ombi`.`TvRequests`.`TvDbId` AS `TvDbId`,
    `Ombi`.`TvRequests`.`ImdbId` AS `ImdbId`,
    `Ombi`.`TvRequests`.`Status` AS `Status`,
    `Ombi`.`EpisodeRequests`.`Title` AS `EpiTitle`,
    `Ombi`.`ChildRequests`.`Title` AS `Title`,
    `Ombi`.`ChildRequests`.`Available` AS `Available`,
    `Ombi`.`ChildRequests`.`MarkedAsAvailable` AS `MarkedAsAvailable`,
    `Ombi`.`ChildRequests`.`Denied` AS `Denied`,
    `Ombi`.`ChildRequests`.`DeniedReason` AS `DeniedReason`,
    `Ombi`.`EpisodeRequests`.`Link_Quali` AS `4K`,
    `Ombi`.`EpisodeRequests`.`Dow_Status` AS `Dow_Status`,
    `Ombi`.`EpisodeRequests`.`Check_Quali` AS `Check_Quali`,
    `Ombi`.`EpisodeRequests`.`Bs_Link` AS `Bs_Link`,
    `Ombi`.`EpisodeRequests`.`Link` AS `Link`,
    `Ombi`.`EpisodeRequests`.`Link_Quali` AS `Link_Quali`,
    `Ombi`.`EpisodeRequests`.`Alt_Link` AS `Alt_Link`,
    `Ombi`.`EpisodeRequests`.`Alt_Link_Quali` AS `Alt_Link_Quali`,
    `Ombi`.`EpisodeRequests`.`Error` AS `Error`,
    `Ombi`.`EpisodeRequests`.`Info` AS `Info`
FROM
    (
        (
            (
                `Ombi`.`EpisodeRequests`
            JOIN `Ombi`.`SeasonRequests` ON
                (
                    `Ombi`.`EpisodeRequests`.`SeasonId` = `Ombi`.`SeasonRequests`.`Id`
                )
            )
        JOIN `Ombi`.`ChildRequests` ON
            (
                `Ombi`.`SeasonRequests`.`ChildRequestId` = `Ombi`.`ChildRequests`.`Id`
            )
        )
    JOIN `Ombi`.`TvRequests` ON
        (
            `Ombi`.`ChildRequests`.`ParentRequestId` = `Ombi`.`TvRequests`.`Id`
        )
    )
UNION
SELECT
    MovieRequests.ID,
    TRUE,
    NULL,
    NULL,
    MovieRequests.Title,
    NULL,
    NULL,
    MovieRequests.TheMovieDbId,
    MovieRequests.ImdbId,
    MovieRequests.Status,
    NULL,
    MovieRequests.Title,
    MovieRequests.Available,
    MovieRequests.MarkedAsAvailable,
    MovieRequests.Denied,
    MovieRequests.DeniedReason,
    MovieRequests.Has4KRequest,
    MovieRequests.Dow_Status,
    MovieRequests.Check_Quali,
    MovieRequests.Bs_Link,
    MovieRequests.Link,
    MovieRequests.Link_Quali,
    MovieRequests.Alt_Link,
    MovieRequests.Alt_Link_Quali,
    MovieRequests.Error,
    MovieRequests.Info
FROM
    MovieRequests
    WHERE MovieRequests.Denied != 1 ;
 CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;

    ALTER TABLE  `Ombi`.`MovieRequests`
    ALTER TABLE  `Ombi`.`EpisodeRequests`
    ADD COLUMN Dow_Status VARCHAR(255),
   ADD COLUMN Check_Quali VARCHAR(255),
   ADD COLUMN Bs_Link VARCHAR(255),
   ADD COLUMN Link VARCHAR(255),
   ADD COLUMN Link_Quali VARCHAR(255),
   ADD COLUMN Alt_Link VARCHAR(255),
   ADD COLUMN Alt_Link_Quali VARCHAR(255),
   ADD COLUMN Error VARCHAR(30),
   ADD COLUMN Info VARCHAR(255);

    ALTER TABLE  `Ombi`.`TvRequests`
   ADD COLUMN Watcher VARCHAR(255);

   #add logger for tv request with logger 

ALTER TABLE`Ombi`.`TvRequests` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
ALTER TABLE`Ombi`.`MovieRequests` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
ALTER TABLE`Ombi`.`SeasonRequests` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
ALTER TABLE`Ombi`.`EpisodeRequests` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
ALTER TABLE`Ombi`.`ChildRequests` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
   CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;